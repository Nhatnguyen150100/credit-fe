import { useEffect, useState } from "react";
import { Button, Empty, message, Spin } from "antd";
import { Navigate, useNavigate, useParams } from "react-router-dom";
import axiosRequest from "../../../plugins/request";
import Visibility from "../../../components/visibility";
import { IInfo } from "../../../types/info";
import { formatCurrency } from "../../../utils/format-money";
import { formatDate } from "../../../utils/day-format";
import DEFINE_ROUTER from "../../../constants/router-define";
import { ArrowLeftOutlined, PhoneOutlined } from "@ant-design/icons";

export default function InformationDetail() {
  const { id } = useParams<{ id: string }>();
  const [userInfo, setUserInfo] = useState<IInfo>();
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleGetInfo = async () => {
    try {
      setLoading(true);
      const rs = await axiosRequest.get(`/v1/information/${id}`);
      const data = rs.data.data;
      setUserInfo(data);
    } catch (error: any) {
      console.log("üöÄ ~ handleGetInfo ~ error:", error.message);
      alert(error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (id) handleGetInfo();
  }, [id]);

  const handleClickPayment = () => {
    navigate(`/${id}/payment-method`);
  };

  if (!id) {
    message.error("Kh√¥ng t√¨m th·∫•y h·ªì s∆° c·ªßa b·∫°n");
    return <Navigate to={DEFINE_ROUTER.home} replace />;
  }

  const DEFINE_TABLE_INFO = [
    {
      label: "H·ªç t√™n",
      value: userInfo?.name
    },
    {
      label: "S·ªë CCCD",
      value: userInfo?.user_id
    },
    {
      label: "T√†i kho·∫£n nh·∫≠n ti·ªÅn",
      value: userInfo?.receiving_account_number
    },
    {
      label: "Ng√¢n h√†ng",
      value: userInfo?.bank_name
    },
    {
      label: "Th·ªùi gian n·ªôp ƒë∆°n",
      value: formatDate(userInfo?.loan_date ?? "", "DD-MM-YYYY"),
    },
    {
      label: "S·ªë ti·ªÅn gi·∫£i ng√¢n",
      value: formatCurrency(userInfo?.loan_amount ?? 0),
    },
    {
      label: "K√¨ h·∫°n xin vay ti·ªÅn",
      value: "7 ng√†y",
    },
    {
      label: "S·ªë ti·ªÅn ƒë·∫øn h·∫°n thanh to√°n",
      value: formatCurrency(userInfo?.amount_payable ?? 0),
    },
    {
      label: "Ph√≠ qu√° h·∫°n vay",
      value: formatCurrency(0),
    },
    {
      label: "T·ªïng s·ªë ti·ªÅn c·∫ßn ho√†n tr·∫£",
      value: formatCurrency(userInfo?.amount_payable ?? 0),
    },
  ];

  return (
    <>
      <Visibility
        visibility={Boolean(userInfo)}
        suspenseComponent={loading ? <Spin /> : <Empty />}
      >
        <div className="w-full flex justify-center items-center">
          <div className="h-screen overflow-y-auto w-screen flex flex-col justify-start items-center bg-gray-100 sm:max-w-[450px] sm:border">
            <div className="py-3 px-4 flex justify-between items-center w-full bg-blue-700 border-b border-white">
              <ArrowLeftOutlined
                className="text-white"
                onClick={() => navigate(-1)}
              />
              <span className="text-sm text-white font-light">
                Chi ti·∫øt ƒë∆°n vay
              </span>
              <PhoneOutlined className="text-white" />
            </div>
            <div className="flex w-full flex-col justify-start items-center pb-10">
              <div className="h-[160px] w-full bg-blue-700 relative">
                <div className="w-full absolute top-10 flex justify-center items-center">
                  <div className="rounded-lg w-[90vw] bg-white p-5 flex flex-col justify-start items-center space-y-5 sm:w-[380px]">
                    <div className="flex flex-col w-full space-y-2 justify-start items-center">
                      <span className="text-sm text-gray-700">
                        T·ªïng s·ªë ti·ªÅn c·∫ßn ph·∫£i tr·∫£
                      </span>
                      <span className="text-3xl text-blue-700 font-semibold">
                        {formatCurrency(userInfo?.amount_payable ?? 0)}
                      </span>
                    </div>
                    <div className="w-full px-5 flex flex-row justify-between items-center">
                      <div className="flex flex-col justify-start items-start space-y-1">
                        <span className="text-sm text-gray-700">
                          Ng√†y ho√†n tr·∫£ kho·∫£n vay
                        </span>
                        <span className="text-sm ">
                          {formatDate(
                            userInfo?.date_payable ?? "",
                            "DD-MM-YYYY"
                          )}
                        </span>
                      </div>
                      <div className="flex flex-col justify-start items-start space-y-1">
                        <span className="text-sm text-red-700">
                          {userInfo?.status === "NOT_PAY"
                            ? "Ch∆∞a thanh to√°n"
                            : "ƒê√£ qu√° h·∫°n"}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="mt-[80px] flex flex-col justify-start items-center space-y-5 w-full">
                <div className="bg-white w-full p-3">
                  <div className=" grid grid-cols-2 w-full border">
                    {DEFINE_TABLE_INFO.map((item, index) => (
                      <>
                        <span
                          className={`text-sm text-gray-700 border-r h-[40px] flex justify-center items-center ${
                            index !== DEFINE_TABLE_INFO.length - 1 && "border-b"
                          }`}
                          key={index}
                        >
                          {item.label}
                        </span>
                        <span
                          className={`text-sm  h-[40px] flex justify-center items-center ${
                            index !== DEFINE_TABLE_INFO.length - 1 && "border-b"
                          }`}
                        >
                          {item.value}
                        </span>
                      </>
                    ))}
                  </div>
                </div>
              </div>
              <Button
                type="primary"
                onClick={() => {
                  handleClickPayment();
                }}
                className="rounded-sm h-[40px] mt-5 w-[90vw] sm:max-w-[360px]"
              >
                L·∫≠p t·ª©c thanh to√°n
              </Button>
              <p className="text-yellow-600 text-sm whitespace-pre-wrap px-5 mt-5">
                L∆∞u √Ω: t√†i kho·∫£n thanh to√°n c·ªßa m·ªói ƒë∆°n ƒë·∫∑t h√†ng kh√°c nhau, h√£y
                nh·∫•p v√†o "thanh to√°n ngay l·∫≠p t·ª©c" ƒë·ªÉ xem t√†i kho·∫£n thanh to√°n
                th·ª© t·ª± c·ªßa b·∫°n. ƒê·ªÉ tr√°nh m·∫•t ti·ªÅn, h√£y c·∫©n th·∫≠n ki·ªÉm tra t√†i
                kho·∫£n chuy·ªÉn ti·ªÅn.
              </p>
              <p className="text-yellow-600 text-sm whitespace-pre-wrap px-5 mt-3">
                N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o kh√°c, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i{" "}
                <a className="text-blue-700 underline">ƒêi ngay</a>
              </p>
            </div>
          </div>
        </div>
      </Visibility>
    </>
  );
}
